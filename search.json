[{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jbgruber.github.io/rollama/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"annotation","text":"installed Ollama machine downloaded package rollama can load package pull default model (llama2) calling:","code":"library(rollama) pull_model() #> ✔ model llama2 pulled succesfully"},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"prompting-strategies","dir":"Articles","previous_headings":"","what":"Prompting Strategies","title":"annotation","text":"want annotate textual data, can use various prompting strategies. overview common approaches, can read paper Weber Reichardt (2023). strategies primarily differ whether many examples given (Zero-shot, One-shot, -shot) whether reasoning involved (Chain--Thought). writing prompt can give model content system part, user part assistant part. system message typically includes instructions context guides interaction, setting stage user assistant interact. annotation task write: “assign texts categories. Answer just correct category.” table summarizes different prompting strategies annotating textual data. strategy varies number examples given incorporation reasoning.","code":""},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"zero-shot","dir":"Articles","previous_headings":"Prompting Strategies","what":"Zero-shot","title":"annotation","text":"approach, prior examples given. structure includes system prompt providing instructions user prompt text classify classification question (example provide categories).","code":"library(tibble) library(purrr) q <- tribble(   ~role,    ~content,   \"system\", \"You assign texts into categories. Answer with just the correct category.\",   \"user\",   \"text: the pizza tastes terrible\\ncategories: positive, neutral, negative\" ) query(q) #>  #> ── Answer ──────────────────────────────────────────────────────── #> Category: Negative"},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"one-shot","dir":"Articles","previous_headings":"Prompting Strategies","what":"One-shot","title":"annotation","text":"involves giving single example actual task. structure includes system prompt, followed user prompt example text classification question, assistant’s example classification, another user prompt new text classify. nice side effect one-shot strategy (n>0-strategies) can tune format model uses replies. example, want output easy parse, change assistant message \"{'Category':'Negative','Confidence':'100%','Important':'terrible'}\" valid JSON return can parsed list , e.g., jsonlite::fromJSON(). using pluck(answer, \"message\", \"content\"), can directly extract result don’t need copy screen.","code":"q <- tribble(   ~role,    ~content,   \"system\", \"You assign texts into categories. Answer with just the correct category.\",   \"user\", \"text: the pizza tastes terrible\\ncategories: positive, neutral, negative\",   \"assistant\", \"Category: Negative\",   \"user\", \"text: the service is great\\ncategories: positive, neutral, negative\" ) query(q) #>  #> ── Answer ──────────────────────────────────────────────────────── #> Category: Positive q <- tribble(   ~role,    ~content,   \"system\", \"You assign texts into categories. Answer with just the correct category.\",   \"user\", \"text: the pizza tastes terrible\\ncategories: positive, neutral, negative\",   \"assistant\", \"{'Category':'Negative','Confidence':'100%','Important':'terrible'}\",   \"user\", \"text: the service is great\\ncategories: positive, neutral, negative\" ) answer <- query(q) #>  #> ── Answer ──────────────────────────────────────────────────────── #> {'Category':'Positive','Confidence':'100%','Important':'great'}"},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"few-shot","dir":"Articles","previous_headings":"Prompting Strategies","what":"Few-shot","title":"annotation","text":"strategy includes multiple examples (one). structure similar one-shot several iterations user assistant messages providing examples final text classify.","code":"q <- tribble(   ~role,    ~content,   \"system\", \"You assign texts into categories. Answer with just the correct category.\",   \"user\", \"text: the pizza tastes terrible\\ncategories: positive, neutral, negative\",   \"assistant\", \"Category: Negative\",   \"user\", \"text: the service is great\\ncategories: positive, neutral, negative\",   \"assistant\", \"Category: Positive\",   \"user\", \"text: I once came here with my wife\\ncategories: positive, neutral, negative\",   \"assistant\", \"Category: Neutral\",   \"user\", \"text: I once ate pizza\\ncategories: positive, neutral, negative\" ) query(q) #>  #> ── Answer ──────────────────────────────────────────────────────── #> Category: Neutral"},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"chain-of-thought","dir":"Articles","previous_headings":"Prompting Strategies","what":"Chain-of-Thought","title":"annotation","text":"approach involves least one reasoning step. structure starts system prompt, user prompt text classify reasoning question. next step can use assistant’s reasoning user prompt classification question.","code":"q_thought <- tribble(   ~role,    ~content,   \"system\", \"You assign texts into categories. \",   \"user\",   \"text: the pizza tastes terrible\\nWhat sentiment (positive, neutral, or negative) would you assign? Provide some thoughts.\" ) output_thought <- query(q_thought) #>  #> ── Answer ──────────────────────────────────────────────────────── #>  #> Based on the text \"the pizza tastes terrible,\" I would assign a sentiment of negative. Here's why: #>  #> * The use of the word \"tastes\" implies that the speaker has a strong opinion about the taste of the pizza, which is typically associated with negative #> emotions. #> * The phrase \"terrible\" is a strong adjective that conveys a sense of disappointment or displeasure. #> * The sentiment is further reinforced by the fact that the speaker used the word \"tastes,\" which implies a personal evaluation or judgment about the pizza's #> taste, rather than a neutral description. #>  #> Overall, based on the language and structure of the sentence, it seems clear that the speaker has a negative sentiment towards the pizza. pluck(output_thought, \"message\", \"content\") #> [1] \"\\nBased on the text \\\"the pizza tastes terrible,\\\" I would assign a sentiment of negative. Here's why:\\n\\n* The use of the word \\\"tastes\\\" implies that the speaker has a strong opinion about the taste of the pizza, which is typically associated with negative emotions.\\n* The phrase \\\"terrible\\\" is a strong adjective that conveys a sense of disappointment or displeasure.\\n* The sentiment is further reinforced by the fact that the speaker used the word \\\"tastes,\\\" which implies a personal evaluation or judgment about the pizza's taste, rather than a neutral description.\\n\\nOverall, based on the language and structure of the sentence, it seems clear that the speaker has a negative sentiment towards the pizza.\" q <- tribble(   ~role,    ~content,   \"system\", \"You assign texts into categories. \",   \"user\",   \"text: the pizza tastes terrible\\nWhat sentiment (positive, neutral, or negative) would you assign? Provide some thoughts.\",   \"assistant\", output_thought$message$content,   \"user\",   \"Now answer with just the correct category (positive, neutral, or negative)\" ) query(q) #>  #> ── Answer ──────────────────────────────────────────────────────── #>  #> Negative"},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"batch-annotation","dir":"Articles","previous_headings":"","what":"Batch annotation","title":"annotation","text":"practice, probably never want annotate just one text. section, show can wrap rollama::query() another function ask model annotate batch texts. might add function package future, moment, want keep simple.","code":""},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"function-to-create-a-query","dir":"Articles","previous_headings":"Batch annotation","what":"Function to create a query","title":"annotation","text":"create_query function designed facilitate creation structured query text classification. Components: System Message: Provides context instructions classification task. Examples: Prior examples consisting user messages assistant responses (one-shot -shot learning). Text Classify: new text categorized. Classification Question: Lists possible categories classification.","code":"create_query <- function(systemmsg, examples, texttoclassify, classification_question) {   # Start with the system message   q <- tribble(     ~role,    ~content,     \"system\", systemmsg   )    # Add examples (if any), appending the classification question to the user messages   for(example in examples) {     usermsg_with_question <- paste(example$usermsg, \"\\n\", classification_question)     q <- add_row(q, role = \"user\", content = usermsg_with_question)     q <- add_row(q, role = \"assistant\", content = example$assistantmsg)   }    # Add the current text to classify along with the classification question   usermsg_final <- paste(\"text:\", texttoclassify, \"\\n\", classification_question)   q <- add_row(q, role = \"user\", content = usermsg_final)    return(q) }"},{"path":[]},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"zero-shot-example","dir":"Articles","previous_headings":"Batch annotation > Example usage","what":"Zero-shot example","title":"annotation","text":"example, function used without examples.","code":"systemmsg <- \"You assign texts into categories. Answer with just the correct category.\" q_zs <- create_query(systemmsg, examples = list(), \"the pizza tastes terrible\", \"Categories: positive, neutral, negative\") query(q_zs) #>  #> ── Answer ──────────────────────────────────────────────────────── #>  #> Category: Negative"},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"one-shot-example-with-one-example","dir":"Articles","previous_headings":"Batch annotation > Example usage","what":"One-shot example with one example","title":"annotation","text":", one prior example provided aid classification:","code":"examples_os <- list(   list(     usermsg = \"text: the pizza tastes terrible\",     assistantmsg = \"Category: Negative\"   ) ) q_os <- create_query(systemmsg, examples_os, \"the service is great\", \"Categories: positive, neutral, negative\") query(q_os) #>  #> ── Answer ──────────────────────────────────────────────────────── #> Category: Positive"},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"few-shot-example-with-multiple-examples","dir":"Articles","previous_headings":"Batch annotation > Example usage","what":"Few-shot example with multiple examples","title":"annotation","text":"scenario uses multiple examples enrich context new classification:","code":"examples_fs <- list(   list(     usermsg = \"text: the pizza tastes terrible\",     assistantmsg = \"Category: Negative\"   ),   list(     usermsg = \"text: the service is great\",     assistantmsg = \"Category: Positive\"   ),   list(     usermsg = \"text: I once came here with my wife\",     assistantmsg = \"Category: Neutral\"   ) ) q_fs <- create_query(systemmsg, examples_fs, \"I once ate pizza\", \"Categories: positive, neutral, negative\") query(q_fs) #>  #> ── Answer ──────────────────────────────────────────────────────── #> Category: Positive"},{"path":"https://jbgruber.github.io/rollama/articles/annotation.html","id":"another-example-using-a-dataframe","dir":"Articles","previous_headings":"","what":"Another example using a dataframe","title":"annotation","text":"example demonstrates perform sentiment analysis set movie reviews. process involves creating dataframe reviews, processing review classify sentiment, appending results new column dataframe. create dataframe named movie_reviews two columns: define system message classification question guide sentiment analysis: function process_reviews Iterates review. Constructs query using create_query. Obtains sentiment classification (query(q) function). Stores result annotations vector. Appends annotations new column dataframe. takes little longer classic supervised machine learning even classification transformer models. However, advantage instructions can provided using plain English, models need examples perform surprisingly well, best models, like mixtral, can often deal complex categories approaches.","code":"# Create an example dataframe with 5 movie reviews movie_reviews <- tibble(   review_id = 1:5,   review = c(\"A stunning visual spectacle with a gripping storyline.\",              \"The plot was predictable, but the acting was superb.\",              \"An overrated film with underwhelming performances.\",              \"A beautiful tale of love and adventure, beautifully shot.\",              \"The movie lacked depth, but the special effects were incredible.\") ) # Print the initial dataframe movie_reviews #> # A tibble: 5 × 2 #>   review_id review                                                 #>       <int> <chr>                                                  #> 1         1 A stunning visual spectacle with a gripping storyline. #> 2         2 The plot was predictable, but the acting was superb.   #> 3         3 An overrated film with underwhelming performances.     #> 4         4 A beautiful tale of love and adventure, beautifully s… #> 5         5 The movie lacked depth, but the special effects were … systemmsg <- \"Classify the sentiment of the movie review. Answer with just the correct category.\" classification_question <- \"Categories: positive, neutral, negative\"  # Function to process each review and append the result to a new column process_reviews <- function(reviews) {   annotations <- vector(\"character\", length = nrow(reviews))    for (i in seq_along(reviews$review)) {     q <- create_query(systemmsg, examples = list(), reviews$review[i], classification_question)     output <- query(q, screen = FALSE)     annotations[i] <- pluck(output, \"message\", \"content\")   }   reviews$annotation <- annotations   return(reviews) }  # Process and annotate the movie reviews annotated_reviews <- process_reviews(movie_reviews)  # Print the annotated dataframe annotated_reviews #> # A tibble: 5 × 3 #>   review_id review                                      annotation #>       <int> <chr>                                       <chr>      #> 1         1 A stunning visual spectacle with a grippin… \"\\nPositi… #> 2         2 The plot was predictable, but the acting w… \"Positive\" #> 3         3 An overrated film with underwhelming perfo… \"Negative\" #> 4         4 A beautiful tale of love and adventure, be… \"Positive\" #> 5         5 The movie lacked depth, but the special ef… \"Negative\""},{"path":"https://jbgruber.github.io/rollama/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes B. Gruber. Author, maintainer. Maximilian Weber. Author, contributor.","code":""},{"path":"https://jbgruber.github.io/rollama/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gruber J, Weber M (2024). rollama: Communicate 'Ollama'. R package version 0.0.3.9000, https://github.com/JBGruber/rollama, https://jbgruber.github.io/rollama/.","code":"@Manual{,   title = {rollama: Communicate with 'Ollama'},   author = {Johannes B. Gruber and Maximilian Weber},   year = {2024},   note = {R package version 0.0.3.9000, https://github.com/JBGruber/rollama},   url = {https://jbgruber.github.io/rollama/}, }"},{"path":"https://jbgruber.github.io/rollama/index.html","id":"rollama-","dir":"","previous_headings":"","what":"Communicate with Ollama","title":"Communicate with Ollama","text":"goal rollama wrap Ollama API, allows run different LLMs locally create experience similar ChatGPT/OpenAI’s API. Ollama easy deploy handles huge number models. Checkout project : https://github.com/ollama/ollama.","code":""},{"path":"https://jbgruber.github.io/rollama/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Communicate with Ollama","text":"can install package CRAN: can install development version rollama GitHub : easiest way get Ollama running Docker. command line interface, can start Ollama locally one command (add sudo permission denied): restarting, can run Ollama command (add sudo permission denied): Alternatively, can use Docker Compose file gist: don’t know use Docker Compose, can follow video:","code":"install.packages(\"rollama\") # install.packages(\"remotes\") remotes::install_github(\"JBGruber/rollama\") docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama docker start ollama wget https://gist.githubusercontent.com/JBGruber/73f9f49f833c6171b8607b976abc0ddc/raw/ddf7bd411a6595d0bd770f99de62f2ac8864f6dc/docker-compose.yml docker-compose up -d"},{"path":"https://jbgruber.github.io/rollama/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Communicate with Ollama","text":"first thing installation pull one models https://ollama.com/library. calling pull_model() without arguments, pulling (current) default model — “llama2 7b”: two ways communicate Ollama API. can make single requests, store history treats query beginning new chat: can use chat function, treats messages sent R session part conversation: done conversation want start new one, can like :","code":"library(rollama) pull_model() # ask a single question query(\"why is the sky blue?\") #>  #> ── Answer from llama2 ────────────────────────────────────────────────────────── #>  #> The sky appears blue because of a phenomenon called Rayleigh scattering, which #> occurs when light travels through the Earth's atmosphere. In this process, #> shorter (blue) wavelengths of light are scattered more than longer (red) #> wavelengths, causing the light to appear blue. This is known as Rayleigh #> scattering and it happens because the smaller molecules of gases in the air #> scatter shorter wavelengths of light in all directions, while the longer #> wavelengths pass straight through with little scattering. #>  #> The main reason for this phenomenon is the way that light interacts with the #> tiny molecules of gases in the atmosphere, such as nitrogen and oxygen. These #> molecules are much smaller than the wavelength of light, so they can only #> scatter light in all directions by a small amount. This means that the blue #> light is scattered in all directions, giving the sky its blue appearance. #>  #> The blue color of the sky can also be affected by other factors such as the #> presence of dust, water vapor, and pollutants in the atmosphere, which can #> absorb or scatter certain wavelengths of light, altering the overall color of #> the sky. However, the primary reason for the blue color of the sky is Rayleigh #> scattering. #>  #> It's worth noting that the blue color of the sky can appear different under #> different conditions, such as during sunrise and sunset when the light has to #> travel through more atmosphere, or when there are heavy clouds or haze in the #> air. In these cases, the blue color may be less pronounced or even absent. # hold a conversation chat(\"why is the sky blue?\") #>  #> ── Answer from llama2 ────────────────────────────────────────────────────────── #>  #> The sky appears blue because of a phenomenon called Rayleigh scattering. When #> sunlight enters Earth's atmosphere, it encounters tiny molecules of gases such #> as nitrogen and oxygen. These molecules scatter the light in all directions, #> but they scatter shorter (blue) wavelengths more than longer (red) wavelengths. #>  #> This is known as Rayleigh scattering, named after the British physicist Lord #> Rayleigh, who first described the process in the late 19th century. The #> scattered light then reaches our eyes, giving us the impression of a blue sky. #>  #> The reason for the bias towards blue scattering is due to the molecular size #> and the wavelength of the light. The smaller the molecule, the more it scatters #> shorter wavelengths of light. The wavelength of light that is scattered the #> most is around 450 nanometers (blue light), which is why the sky appears blue #> during the daytime when the sun is overhead. #>  #> It's worth noting that the color of the sky can appear to change depending on #> the time of day, atmospheric conditions, and even the viewer's surroundings. #> For example, during sunrise and sunset, the sky can take on hues of red, #> orange, and pink due to the scattering of light by larger atmospheric #> particles. #>  #> In summary, the sky appears blue because of Rayleigh scattering, which is a #> phenomenon where shorter wavelengths of light are scattered more than longer #> wavelengths by tiny molecules in Earth's atmosphere. chat(\"and how do you know that?\") #>  #> ── Answer from llama2 ────────────────────────────────────────────────────────── #>  #> I know that the sky appears blue due to Rayleigh scattering because it is a #> well-established scientific fact that has been observed, measured, and #> explained through various scientific studies and experiments. Here are some of #> the key pieces of evidence and explanations: #>  #> 1. Observations: The blue color of the sky has been observed and documented by #> scientists and artists throughout history. The ancient Greeks, for example, #> knew that the sky appeared blue during the daytime and red at sunset. #> 2. Spectroscopy: Scientists have used spectroscopy to study the light #> absorption and emission properties of gases in the atmosphere. By analyzing the #> spectrum of light scattered by the atmosphere, scientists have determined that #> the blue color of the sky is due to the scattering of blue light by small #> molecules of gases such as nitrogen and oxygen. #> 3. Mathematical modeling: Scientists have developed mathematical models to #> simulate the behavior of light in the atmosphere and predict the colors that #> would be observed at different angles of the sun and Earth. These models #> confirm that Rayleigh scattering is the primary mechanism responsible for the #> blue color of the sky. #> 4. Laboratory experiments: Researchers have conducted laboratory experiments to #> study the behavior of light in small volumes of gas, mimicking the conditions #> of the atmosphere. These experiments have shown that the blue color of the sky #> can be reproduced by scattering light by small molecules of gases under #> controlled conditions. #> 5. Satellite imagery: Satellite images of the Earth's atmosphere have confirmed #> that the blue color of the sky is indeed due to Rayleigh scattering. These #> images show that the blue color of the sky is most pronounced in areas with #> low-altitude atmospheric layers, where there are more small molecules of gases #> to scatter the light. #>  #> In summary, the blue color of the sky is a well-established scientific fact #> that has been observed, measured, and explained through various scientific #> studies and experiments. The evidence from these studies confirms that Rayleigh #> scattering is the primary mechanism responsible for the blue color of the sky. new_chat()"},{"path":"https://jbgruber.github.io/rollama/index.html","id":"model-parameters","dir":"","previous_headings":"","what":"Model parameters","title":"Communicate with Ollama","text":"can set number model parameters, either creating new model, modelfile, including parameters prompt:","code":"query(\"why is the sky blue?\", model_params = list(   seed = 42,   temperature = 0,   num_gpu = 0 )) #>  #> ── Answer from llama2 ────────────────────────────────────────────────────────── #>  #> The sky appears blue because of a phenomenon called Rayleigh scattering, which #> occurs when sunlight enters Earth's atmosphere. The sunlight encounters tiny #> molecules of gases such as nitrogen and oxygen, which scatter the light in all #> directions. #>  #> The shorter wavelengths of light, such as blue and violet, are scattered more #> than the longer wavelengths, such as red and orange. This is known as #> Rayleigh's Law. As a result, the blue light is dispersed throughout the #> atmosphere, giving the sky its blue appearance. #>  #> The reason why the sky appears blue under these conditions is due to the way #> that our eyes perceive colors. When white light enters our eyes, it is filtered #> through the lens and hits the retina, which contains cells called cone cells #> that are sensitive to different wavelengths of light. The cells are most #> sensitive to the blue and violet end of the spectrum, so when we look at a blue #> sky, our brains interpret this as the dominant color. #>  #> It's worth noting that the appearance of the sky can vary depending on a number #> of factors, including the time of day, the amount of dust and water vapor in #> the air, and the angle of the sun. For example, during sunrise and sunset, the #> sky can take on hues of red, orange, and pink due to the scattering of light by #> atmospheric particles. #>  #> In summary, the sky appears blue because of the way that light is scattered in #> the atmosphere, and how our eyes perceive colors."},{"path":[]},{"path":"https://jbgruber.github.io/rollama/index.html","id":"configuration","dir":"","previous_headings":"","what":"Configuration","title":"Communicate with Ollama","text":"can configure server address, system prompt model used query chat. configured otherwise, rollama assumes using default port (11434) local instance (“http://localhost”). Let’s make explicit setting option: can change model answers setting configuration system message plain English (another language supported model): default, package uses “llama2 7B” model. Supported models can found https://ollama.com/library. download specific model make use additional information available “Tags” https://ollama.com/library/mistral/tags. Change via rollama_model:","code":"options(rollama_server = \"http://localhost:11434\") options(rollama_config = \"You make answers understandable to a 5 year old\") query(\"why is the sky blue?\") #>  #> ── Answer from llama2 ────────────────────────────────────────────────────────── #> Oh, wow! That's a great question! *giggles* You know what? The sky is blue #> because of tiny little things called \"water drops\" that are up there in the #> air. They reflect sunlight and make the sky look blue! Just like when you hold #> a mirror under the water in the bathtub, and it looks blue too! *excitedly* #>  #> And do you know what's even more cool? The sky can change colors! Sometimes #> it's red during sunset, or yellow during sunrise. It's like magic! *smiles* So, #> that's why the sky is blue! Isn't that amazing? 😍 options(rollama_model = \"mixtral\") # if you don't have the model yet: pull_model(\"mixtral\") query(\"why is the sky blue?\") #>  #> ── Answer from mixtral ───────────────────────────────────────────────────────── #> When the sun shines, it sends out little bits of light called \"sunlight.\" #> Sunlight is made up of different colors, like red, orange, yellow, green, blue, #> and purple. You can see all these colors in a rainbow! #>  #> When sunlight reaches our sky, it meets tiny particles (like molecules of air) #> that scatter, or spread, the light in different directions. Blue light is #> scattered more than other colors because it travels in smaller, shorter waves. #> This scattering makes the sky look blue to us. #>  #> At sunrise and sunset, the sunlight has to travel a longer path through the #> atmosphere to reach our eyes. During this journey, even more of the blue light #> gets scattered away, leaving mostly reds, oranges, and yellows for us to see. #> That's why sunrises and sunsets often have beautiful colors!"},{"path":"https://jbgruber.github.io/rollama/reference/chat_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle conversations — chat_history","title":"Handle conversations — chat_history","text":"Shows deletes (new_chat) local prompt response history start new conversation.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/chat_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle conversations — chat_history","text":"","code":"chat_history()  new_chat()"},{"path":"https://jbgruber.github.io/rollama/reference/chat_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle conversations — chat_history","text":"chat_history: tibble chat history new_chat: return value","code":""},{"path":"https://jbgruber.github.io/rollama/reference/check_model_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if one or several models are installed on the server — check_model_installed","title":"Check if one or several models are installed on the server — check_model_installed","text":"Check one several models installed server","code":""},{"path":"https://jbgruber.github.io/rollama/reference/check_model_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if one or several models are installed on the server — check_model_installed","text":"","code":"check_model_installed(model, auto_pull = FALSE, server = NULL)"},{"path":"https://jbgruber.github.io/rollama/reference/check_model_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if one or several models are installed on the server — check_model_installed","text":"model names one several models character vector. auto_pull FALSE, default, asks downloading models. server URL Ollama server (API). Defaults \"http://localhost:11434\".","code":""},{"path":"https://jbgruber.github.io/rollama/reference/check_model_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if one or several models are installed on the server — check_model_installed","text":"invisible TRUE/FALSE","code":""},{"path":"https://jbgruber.github.io/rollama/reference/create_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model from a Modelfile — create_model","title":"Create a model from a Modelfile — create_model","text":"Create model Modelfile","code":""},{"path":"https://jbgruber.github.io/rollama/reference/create_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model from a Modelfile — create_model","text":"","code":"create_model(model, modelfile, server = NULL)"},{"path":"https://jbgruber.github.io/rollama/reference/create_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model from a Modelfile — create_model","text":"model name model create modelfile either path model file read contents model file character vector. server URL Ollama server (API). Defaults \"http://localhost:11434\".","code":""},{"path":"https://jbgruber.github.io/rollama/reference/create_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model from a Modelfile — create_model","text":"Nothing. Called create model Ollama server.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/create_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a model from a Modelfile — create_model","text":"Custom models way save system message model parameters dedicated shareable way. use show_model(), can look configuration model column modelfile. get information list valid parameters, check https://github.com/ollama/ollama/blob/main/docs/modelfile.md. options also available query chat functions, yet persistent sessions.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/create_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model from a Modelfile — create_model","text":"","code":"modelfile <- system.file(\"extdata\", \"modelfile.txt\", package = \"rollama\") if (FALSE) create_model(\"mario\", modelfile) modelfile <- \"FROM llama2\\nSYSTEM You are mario from Super Mario Bros.\" if (FALSE) create_model(\"mario\", modelfile)"},{"path":"https://jbgruber.github.io/rollama/reference/embed_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Embeddings — embed_text","title":"Generate Embeddings — embed_text","text":"Generate Embeddings","code":""},{"path":"https://jbgruber.github.io/rollama/reference/embed_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Embeddings — embed_text","text":"","code":"embed_text(   text,   model = NULL,   server = NULL,   model_params = NULL,   verbose = getOption(\"rollama_verbose\", default = interactive()) )"},{"path":"https://jbgruber.github.io/rollama/reference/embed_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Embeddings — embed_text","text":"text text vector generate embeddings . model model use. See https://ollama.com/library options. Default \"llama2\". Set option(rollama_model = \"modelname\") change default current session. See pull_model details. server URL Ollama server (API). Defaults \"http://localhost:11434\". model_params named list additional model parameters listed documentation Modelfile. verbose Whether print status messages Console (TRUE/FALSE). default status messages interactive sessions. Can changed options(rollama_verbose =   FALSE).","code":""},{"path":"https://jbgruber.github.io/rollama/reference/embed_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Embeddings — embed_text","text":"tibble embeddings.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/embed_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Embeddings — embed_text","text":"","code":"if (FALSE) { embed_text(c(\"Here is an article about llamas...\",              \"R is a language and environment for statistical computing and graphics.\")) }"},{"path":"https://jbgruber.github.io/rollama/reference/list_models.html","id":null,"dir":"Reference","previous_headings":"","what":"List models that are available locally. — list_models","title":"List models that are available locally. — list_models","text":"List models available locally.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/list_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List models that are available locally. — list_models","text":"","code":"list_models(server = NULL)"},{"path":"https://jbgruber.github.io/rollama/reference/list_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List models that are available locally. — list_models","text":"server URL Ollama server (API). Defaults \"http://localhost:11434\".","code":""},{"path":"https://jbgruber.github.io/rollama/reference/list_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List models that are available locally. — list_models","text":"tibble installed models","code":""},{"path":"https://jbgruber.github.io/rollama/reference/ping_ollama.html","id":null,"dir":"Reference","previous_headings":"","what":"Ping server to see if Ollama is reachable — ping_ollama","title":"Ping server to see if Ollama is reachable — ping_ollama","text":"Ping server see Ollama reachable","code":""},{"path":"https://jbgruber.github.io/rollama/reference/ping_ollama.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ping server to see if Ollama is reachable — ping_ollama","text":"","code":"ping_ollama(server = NULL, silent = FALSE)"},{"path":"https://jbgruber.github.io/rollama/reference/ping_ollama.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ping server to see if Ollama is reachable — ping_ollama","text":"server URL Ollama server (API). Defaults \"http://localhost:11434\". silent suppress warnings status (return TRUE/FALSE).","code":""},{"path":"https://jbgruber.github.io/rollama/reference/ping_ollama.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ping server to see if Ollama is reachable — ping_ollama","text":"TRUE server running","code":""},{"path":"https://jbgruber.github.io/rollama/reference/pull_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull, show and delete models — pull_model","title":"Pull, show and delete models — pull_model","text":"Pull, show delete models","code":""},{"path":"https://jbgruber.github.io/rollama/reference/pull_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull, show and delete models — pull_model","text":"","code":"pull_model(model = NULL, server = NULL, insecure = FALSE)  show_model(model = NULL, server = NULL)  delete_model(model, server = NULL)  copy_model(model, destination = paste0(model, \"-copy\"), server = NULL)"},{"path":"https://jbgruber.github.io/rollama/reference/pull_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull, show and delete models — pull_model","text":"model name model. Defaults \"llama2\" NULL (except delete_model). server URL Ollama server (API). Defaults \"http://localhost:11434\". insecure allow insecure connections library. use pulling library development. description destination name copied model.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/pull_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull, show and delete models — pull_model","text":"(invisible) tibble information model (except delete_model)","code":""},{"path":"https://jbgruber.github.io/rollama/reference/pull_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pull, show and delete models — pull_model","text":"pull_model(): downloads model show_model(): displays information local model copy_model(): creates model another name existing model delete_model(): deletes local model Model names: Model names follow model:tag format, model can optional namespace example/model. examples orca-mini:3b-q4_1 llama2:70b. tag optional , provided, default latest. tag used identify specific version.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/pull_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull, show and delete models — pull_model","text":"","code":"if (FALSE) { model_info <- pull_model(\"mixtral\") # after you pull, you can get the same information with: model_info <- show_model(\"mixtral\") }"},{"path":"https://jbgruber.github.io/rollama/reference/query.html","id":null,"dir":"Reference","previous_headings":"","what":"Chat with a LLM through Ollama — query","title":"Chat with a LLM through Ollama — query","text":"Chat LLM Ollama","code":""},{"path":"https://jbgruber.github.io/rollama/reference/query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chat with a LLM through Ollama — query","text":"","code":"query(   q,   model = NULL,   screen = TRUE,   server = NULL,   images = NULL,   model_params = NULL,   format = NULL,   template = NULL )  chat(   q,   model = NULL,   screen = TRUE,   server = NULL,   images = NULL,   model_params = NULL,   template = NULL )"},{"path":"https://jbgruber.github.io/rollama/reference/query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chat with a LLM through Ollama — query","text":"q question character string conversation object. model model(s) use. See https://ollama.com/library options. Default \"llama2\". Set option(rollama_model = \"modelname\") change default current session. See pull_model details. screen Logical. answer printed screen. server URL Ollama server (API). Defaults \"http://localhost:11434\". images path(s) images (multimodal models llava). model_params named list additional model parameters listed documentation Modelfile temperature. Use seed set temperature zero get reproducible results (see examples). format format return response . Currently accepted value \"json\". template prompt template use (overrides defined Modelfile).","code":""},{"path":"https://jbgruber.github.io/rollama/reference/query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chat with a LLM through Ollama — query","text":"httr2 response.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chat with a LLM through Ollama — query","text":"query sends single question API, without knowledge previous questions (config message relevant). chat treats new messages part conversation new_chat called.","code":""},{"path":[]},{"path":"https://jbgruber.github.io/rollama/reference/rollama-options.html","id":null,"dir":"Reference","previous_headings":"","what":"rollama Options — rollama-options","title":"rollama Options — rollama-options","text":"behaviour rollama can controlled options(). Specifically, options can set.","code":""},{"path":"https://jbgruber.github.io/rollama/reference/rollama-options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rollama Options — rollama-options","text":"rollama_server default: \"http://localhost:11434\" rollama_model default: \"llama2\" rollama_verbose default: TRUE rollama_config default: None","code":""},{"path":"https://jbgruber.github.io/rollama/reference/rollama-options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rollama Options — rollama-options","text":"","code":"options(rollama_config = \"You make answers understandable to a 5 year old\")"},{"path":"https://jbgruber.github.io/rollama/reference/rollama-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rollama: Communicate with 'Ollama' — rollama-package","title":"rollama: Communicate with 'Ollama' — rollama-package","text":"Wraps 'Ollama' https://ollama.com API, can used communicate generative large language models locally.","code":""},{"path":[]},{"path":"https://jbgruber.github.io/rollama/reference/rollama-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rollama: Communicate with 'Ollama' — rollama-package","text":"Maintainer: Johannes B. Gruber JohannesB.Gruber@gmail.com (ORCID) Authors: Maximilian Weber (ORCID) [contributor]","code":""},{"path":"https://jbgruber.github.io/rollama/news/index.html","id":"rollama-010","dir":"Changelog","previous_headings":"","what":"rollama 0.1.0","title":"rollama 0.1.0","text":"adds function check_model_installed","code":""},{"path":"https://jbgruber.github.io/rollama/news/index.html","id":"rollama-003","dir":"Changelog","previous_headings":"","what":"rollama 0.0.3","title":"rollama 0.0.3","text":"CRAN release: 2024-03-21 add option query several models dedicated embedding models available now (see vignette(\"text-embedding\", \"rollama\")) error handling bug fixes","code":""},{"path":"https://jbgruber.github.io/rollama/news/index.html","id":"rollama-002","dir":"Changelog","previous_headings":"","what":"rollama 0.0.2","title":"rollama 0.0.2","text":"CRAN release: 2024-01-29 Initial CRAN submission.","code":""}]
